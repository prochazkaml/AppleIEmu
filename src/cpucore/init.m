% 6502 lookup tables

lut_src = [
  % 0x00 = No source data
  % 0x01 = Accumulator
  % 0x02 = X index register
  % 0x03 = Y index register
  % 0x04 = Program counter
  % 0x05 = Processor status register
  % 0x06 = Stack pointer
  % 0x07 = Immediate value (8 bit)
  % 0x08 = Memory, absolute [val16]
  % 0x09 = Memory, absolute + X [val16+X]
  % 0x0A = Memory, absolute + Y [val16+Y]
  % 0x0B = Memory, indirect [[val16]]
  % 0x0C = Memory, X-indexed indirect [[val8+X]]
  % 0x0D = Memory, indirect Y-indexed [[val8]+Y]
  % 0x0E = Zero page, absolute [val8]
  % 0x0F = Zero page, absolute + X [val8+X]
  % 0x10 = Zero page, absolute + Y [val8+Y]
  % 0x11 = Immediate value (16 bit) - used for branches
  % 0x12 = Stack (8 bit)
  % 0x13 = 0 - used for clearing flags
  % 0x14 = 1 - used for setting flags
  % 0x15 = Carry flag
  % 0x16 = Interrupt flag
  % 0x17 = Decimal flag
  % 0x18 = Overflow flag
  % 0x19 = Memory, absolute [val16] (16 bit)
  % 0xFF = Invalid opcode, stop execution immediately

  0xFF 0x0C 0xFF 0xFF 0xFF 0x0E 0x0E 0xFF 0x05 0x07 0x01 0xFF 0xFF 0x08 0x08 0xFF ... % BRK not supported
  0x07 0x0D 0xFF 0xFF 0xFF 0x0F 0x0F 0xFF 0x13 0x0A 0xFF 0xFF 0xFF 0x09 0x09 0xFF ...
  0x11 0x0C 0xFF 0xFF 0x0E 0x0E 0x0E 0xFF 0x12 0x07 0x01 0xFF 0x08 0x08 0x08 0xFF ...
  0x07 0x0D 0xFF 0xFF 0xFF 0x0F 0x0F 0xFF 0x14 0x0A 0xFF 0xFF 0xFF 0x09 0x09 0xFF ...
  0x00 0x0C 0xFF 0xFF 0xFF 0x0E 0x0E 0xFF 0x01 0x07 0x01 0xFF 0x11 0x08 0x08 0xFF ...
  0x07 0x0D 0xFF 0xFF 0xFF 0x0F 0x0F 0xFF 0x13 0x0A 0xFF 0xFF 0xFF 0x09 0x09 0xFF ...
  0x00 0x0C 0xFF 0xFF 0xFF 0x0E 0x0E 0xFF 0x12 0x07 0x01 0x0F 0x19 0x08 0x08 0xFF ...
  0x07 0x0D 0xFF 0xFF 0xFF 0x0F 0x0F 0xFF 0x14 0x0A 0xFF 0xFF 0xFF 0x09 0x09 0xFF ...
  0xFF 0x01 0xFF 0xFF 0x03 0x01 0x02 0xFF 0x14 0xFF 0x02 0xFF 0x03 0x01 0x02 0xFF ...
  0x07 0x01 0xFF 0xFF 0x03 0x01 0x02 0xFF 0x03 0x01 0x02 0xFF 0xFF 0x01 0xFF 0xFF ...
  0x07 0x0C 0x07 0xFF 0x0E 0x0E 0x0E 0xFF 0x01 0x07 0x01 0xFF 0x08 0x08 0x08 0xFF ...
  0x07 0x0D 0xFF 0xFF 0x0F 0x0F 0x10 0xFF 0x13 0x0A 0x06 0x0F 0x09 0x09 0x0A 0xFF ...
  0x07 0x0C 0xFF 0xFF 0x0E 0x0E 0x14 0xFF 0x14 0x07 0x14 0xFF 0x08 0x08 0x14 0xFF ...
  0x07 0x0D 0xFF 0xFF 0xFF 0x0F 0x14 0xFF 0x13 0x0A 0xFF 0xFF 0xFF 0x09 0x14 0xFF ...
  0x07 0x0C 0xFF 0xFF 0x0E 0x0E 0x14 0xFF 0x14 0x07 0x00 0xFF 0x08 0x08 0x14 0xFF ...
  0x07 0x0D 0xFF 0xFF 0xFF 0x0F 0x14 0xFF 0x14 0x0A 0xFF 0xFF 0xFF 0x09 0x14 0xFF
];

lut_dest = [
  % Same value meanings as in lut_src

  0xFF 0x01 0xFF 0xFF 0xFF 0x01 0x0E 0xFF 0x12 0x01 0x01 0xFF 0xFF 0x01 0x08 0xFF ...
  0x04 0x01 0xFF 0xFF 0xFF 0x01 0x0F 0xFF 0x15 0x01 0xFF 0xFF 0xFF 0x01 0x09 0xFF ...
  0x04 0x01 0xFF 0xFF 0x05 0x01 0x0E 0xFF 0x05 0x01 0x01 0xFF 0x05 0x01 0x08 0xFF ...
  0x04 0x01 0xFF 0xFF 0xFF 0x01 0x0F 0xFF 0x15 0x01 0xFF 0xFF 0xFF 0x01 0x09 0xFF ...
  0x04 0x01 0xFF 0xFF 0xFF 0x01 0x0E 0xFF 0x12 0x01 0x01 0xFF 0x04 0x01 0x08 0xFF ...
  0x04 0x01 0xFF 0xFF 0xFF 0x01 0x0F 0xFF 0x16 0x01 0xFF 0xFF 0xFF 0x01 0x09 0xFF ...
  0x04 0x01 0xFF 0xFF 0xFF 0x01 0x0E 0xFF 0x01 0x01 0x01 0xFF 0x04 0x01 0x08 0xFF ...
  0x04 0x01 0xFF 0xFF 0xFF 0x01 0x0F 0xFF 0x16 0x01 0xFF 0xFF 0xFF 0x01 0x09 0xFF ...
  0xFF 0x0C 0xFF 0xFF 0x0E 0x0E 0x0E 0xFF 0x03 0xFF 0x01 0xFF 0x08 0x08 0x08 0xFF ...
  0x04 0x0D 0xFF 0xFF 0x0F 0x0F 0x10 0xFF 0x01 0x0A 0x06 0xFF 0xFF 0x09 0xFF 0xFF ...
  0x03 0x01 0x02 0xFF 0x03 0x01 0x02 0xFF 0x03 0x01 0x02 0xFF 0x03 0x01 0x02 0xFF ...
  0x04 0x01 0xFF 0xFF 0x03 0x01 0x02 0xFF 0x18 0x01 0x02 0xFF 0x03 0x01 0x02 0xFF ...
  0x03 0x01 0xFF 0xFF 0x03 0x01 0x0E 0xFF 0x03 0x01 0x02 0xFF 0x03 0x01 0x08 0xFF ...
  0x04 0x01 0xFF 0xFF 0xFF 0x01 0x0F 0xFF 0x17 0x01 0xFF 0xFF 0xFF 0x01 0x09 0xFF ...
  0x02 0x01 0xFF 0xFF 0x02 0x01 0x0E 0xFF 0x02 0x01 0x00 0xFF 0x02 0x01 0x08 0xFF ...
  0x04 0x01 0xFF 0xFF 0xFF 0x01 0x0F 0xFF 0x17 0x01 0xFF 0xFF 0xFF 0x01 0x09 0xFF
];

lut_op = [
  % 0x00: do nothing                                  nop
  % 0x01: dest += (sint8)src if N clear               bpl
  % 0x02: dest += (sint8)src if N set                 bmi
  % 0x03: dest += (sint8)src if V clear               bvc
  % 0x04: dest += (sint8)src if V set                 bvs
  % 0x05: dest += (sint8)src if C clear               bcc
  % 0x06: dest += (sint8)src if C set                 bcs
  % 0x07: dest += (sint8)src if Z clear               bne
  % 0x08: dest += (sint8)src if Z set                 beq
  % 0x09: dest |= (uint8)src                          ora
  % 0x0A: dest &= (uint8)src                          and
  % 0x0B: dest ^= (uint8)src                          eor
  % 0x0C: dest += (uint8)src + C                      adc
  % 0x0D: dest -= (uint8)src + C                      sbc
  % 0x0E: dest -= (uint8)src, do not save result      cmp cpx cpy
  % 0x0F: dest = (uint8)src with N,Z flags affected   lda ldx ldy pla tax tay tsx txa tya
  % 0x10: dest = src << 1                             asl
  % 0x11: dest = src >> 1                             lsr
  % 0x12: dest = rol(src)                             rol
  % 0x13: dest = ror(src)                             ror
  % 0x14: push(pc + 3); dest = (uint16)src            jsr
  % 0x15: dest = pop(uint16)                          rts
  % 0x16: pop(p); dest = pop(uint16)                  rti
  % 0x17: dest = src & 0xC0                           bit
  % 0x18: dest += (uint8)src                          inc inx iny
  % 0x19: dest -= (uint8)src                          dec dex dey
  % 0x1A: dest = (uint16)src                          jmp
  % 0x1B: dest = (uint8)src, no flags affected        clc cld cli clv sec sed sei pha php plp sta stx sty txs

  0xFF 0x09 0xFF 0xFF 0xFF 0x09 0x10 0xFF 0x1B 0x09 0x10 0xFF 0xFF 0x09 0x10 0xFF ...
  0x01 0x09 0xFF 0xFF 0xFF 0x09 0x10 0xFF 0x1B 0x09 0xFF 0xFF 0xFF 0x09 0x10 0xFF ...
  0x14 0x0A 0xFF 0xFF 0x17 0x0A 0x12 0xFF 0x1B 0x0A 0x12 0xFF 0x17 0x0A 0x12 0xFF ...
  0x02 0x0A 0xFF 0xFF 0xFF 0x0A 0x12 0xFF 0x1B 0x0A 0xFF 0xFF 0xFF 0x0A 0x12 0xFF ...
  0x16 0x0B 0xFF 0xFF 0xFF 0x0B 0x11 0xFF 0x1B 0x0B 0x11 0xFF 0x1A 0x0B 0x11 0xFF ...
  0x03 0x0B 0xFF 0xFF 0xFF 0x0B 0x11 0xFF 0x1B 0x0B 0xFF 0xFF 0xFF 0x0B 0x11 0xFF ...
  0x15 0x0C 0xFF 0xFF 0xFF 0x0C 0x13 0xFF 0x0F 0x0C 0x13 0xFF 0x1A 0x0C 0x13 0xFF ...
  0x04 0x0C 0xFF 0xFF 0xFF 0x0C 0x13 0xFF 0x1B 0x0C 0xFF 0xFF 0xFF 0x0C 0x13 0xFF ...
  0xFF 0x1B 0xFF 0xFF 0x1B 0x1B 0x1B 0xFF 0x19 0xFF 0x0F 0xFF 0x1B 0x1B 0x1B 0xFF ...
  0x05 0x1B 0xFF 0xFF 0x1B 0x1B 0x1B 0xFF 0x0F 0x1B 0x1B 0xFF 0xFF 0x1B 0xFF 0xFF ...
  0x0F 0x0F 0x0F 0xFF 0x0F 0x0F 0x0F 0xFF 0x0F 0x0F 0x0F 0xFF 0x0F 0x0F 0x0F 0xFF ...
  0x06 0x0F 0x0F 0xFF 0x0F 0x0F 0x0F 0xFF 0x1B 0x0F 0x0F 0xFF 0x0F 0x0F 0x0F 0xFF ...
  0x0E 0x0E 0xFF 0xFF 0x0E 0x0E 0x19 0xFF 0x18 0x0E 0x19 0xFF 0x0E 0x0E 0x19 0xFF ...
  0x07 0x0E 0xFF 0xFF 0xFF 0x0E 0x19 0xFF 0x1B 0x0E 0xFF 0xFF 0xFF 0x0E 0x19 0xFF ...
  0x0E 0x0D 0xFF 0xFF 0x0E 0x0D 0x18 0xFF 0x18 0x0D 0x00 0xFF 0x0E 0x0D 0x18 0xFF ...
  0x08 0x0D 0xFF 0xFF 0xFF 0x0D 0x18 0xFF 0x1B 0x0D 0xFF 0xFF 0xFF 0x0D 0x18 0xFF
];

% 6502 memory spaces

sysmem = zeros(1, 32768, 'uint8');

applerom = [
%#incbin "build/rom.bin"
];

% 6502 emulation core

a = 0x00
x = 0x00
y = 0x00
%#incfun "src/cpucore/microcode/memory/getword.m" pc = 0xFFFC
p = 0x20 % Bit 5 is always 1
s = 0xFF

tmp8 = 0x00
tmp16 = 0x0000
tmp16_2 = 0x0000
